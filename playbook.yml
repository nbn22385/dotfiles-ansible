---
- hosts: localhost
  connection: local

  vars_files:
    - vars.yml

  tasks:

    ###############################################
    # Ubuntu
    ###############################################

    - name: Add nodejs apt key
      when: ansible_distribution == 'Ubuntu'
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
      become: true

    - name: Add nodejs ppa for apt repo
      when: ansible_distribution == 'Ubuntu'
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_{{ nodejs_version }}.x jammy main"
        update_cache: true
      become: true

    - name: Ensure packages are installed with apt
      when: ansible_distribution == 'Ubuntu'
      apt:
        name:
          - bat
          # - cmake
          - curl
          - fd-find
          # - g++
          - git
          - gnupg
          - jq
          # - llvm
          - nodejs
          - ripgrep
          - stow
          - tmux
          - tree
          - vim
          - zsh
        state: present
        update_cache: true
        cache_valid_time: 604800 # 1 week
      become: true

    - name: Check if fd symlink is created
      stat:
        path: /usr/local/bin/fd
      register: fd_link

    - name: Create symlink for fd
      when:
        - ansible_distribution == 'Ubuntu'
        - fd_link.stat.islnk is defined and fd_link.stat.islnk
      file:
        src: /usr/bin/fdfind
        dest: /usr/local/bin/fd
        state: link
      become: true

    - name: Check if bat symlink is created
      stat:
        path: /usr/local/bin/bat
      register: bat_link

    - name: Create symlink for bat
      when:
        - ansible_distribution == 'Ubuntu'
        - bat_link.stat.islnk is defined and bat_link.stat.islnk
      file:
        src: /usr/bin/batcat
        dest: /usr/local/bin/bat
        state: link
      become: true

    - name: Ensure lazygit is installed
      when: ansible_distribution == 'Ubuntu'
      unarchive:
        src: "https://github.com/jesseduffield/lazygit/releases/download/v{{ lazygit_version }}/lazygit_{{ lazygit_version }}_{{ ansible_system }}_{{ ansible_architecture }}.tar.gz" # noqa yaml[line-length]
        dest: /usr/local/bin
        extra_opts:
          - lazygit
        remote_src: true
      become: true

    - name: Ensure fzf repository is cloned locally
      when: ansible_distribution == 'Ubuntu'
      git:
        repo: "https://github.com/junegunn/fzf.git"
        version: master
        dest: "{{ user_home }}/.fzf"
        single_branch: true
        accept_hostkey: "{{ accept_hostkey }}"
      register: fzf_git_result

    - name: Install fzf
      command: "~/.fzf/install --completion --key-bindings --no-update-rc"
      when:
        - ansible_distribution == 'Ubuntu'
        - fzf_git_result.before != fzf_git_result.after

    ###############################################
    # Common
    ###############################################

    - name: Ensure zsh is default shell
      user:
        name: "{{ ansible_user_id }}"
        shell: /bin/zsh
      become: true

    - name: Ensure base16-shell repository is cloned locally
      git:
        repo: "https://github.com/base16-project/base16-shell.git"
        version: main
        dest: "{{ user_home }}/.config/base16-shell"
        single_branch: true
        accept_hostkey: "{{ accept_hostkey }}"

    - name: Ensure powerlevel10k repository is cloned locally
      git:
        repo: "https://github.com/romkatv/powerlevel10k.git"
        version: master
        dest: "{{ user_home }}/.powerlevel10k"
        single_branch: true
        accept_hostkey: "{{ accept_hostkey }}"

    - name: Ensure minpac is cloned locally
      git:
        repo: "https://github.com/k-takata/minpac.git"
        version: master
        dest: "{{ user_home }}/.vim/pack/minpac/opt/minpac"
        single_branch: true
        accept_hostkey: "{{ accept_hostkey }}"

    - name: Ensure dotfiles repository is cloned locally
      git:
        repo: "{{ dotfiles_repo }}"
        version: "{{ dotfiles_repo_version }}"
        dest: "{{ dotfiles_repo_local_destination }}"
        single_branch: true
        accept_hostkey: "{{ accept_hostkey }}"
      register: dotfiles_git_result

    - name: Deploy dotfiles
      with_items: '{{ stow_folders }}'
      command:
        cmd: "stow --no-folding --restow --target={{ user_home }} {{ item }}"
        chdir: "{{ dotfiles_repo_local_destination }}"
      when: dotfiles_git_result.before != dotfiles_git_result.after

    - name: Install vim plugins
      command: "exec vim +PackUpdateAndQuit < /dev/tty"
      register: vim_plugin_result
      failed_when: vim_plugin_result.rc != 0
      changed_when: false
